Sending Messages to Azure Queues
================================
Note: This can be run locally (does not need to be within container)
Note: May need virtual environment
1. Set env variable FABLE_CONFIG_VAULTNAME: `export FABLE_CONFIG_VAULTNAME=fabletestdockerkeyvault`
2. Authenticate with Azure: `az login`
3. Run program: `python3 azure_send_messages.py`
    - Relies on cluster.json file which should be structured like
        {
            "uoregon.edu": [
                "http://comm.uoregon.edu/newsreleases/2004/20040430B.html",
                "https://jsma.uoregon.edu/exhibitions/ten-symbols-longevity-and-late-joseon-korean-culture",
                "http://oceanlaw.uoregon.edu/publications/new_carissa.html",
                "http://darkwing.uoregon.edu/~sergiok/brasil/belo.html"
            ],
            hostname: [
                URLs
            ]
            ...
        }
    - Currently ignores any hostnames with more than 150 URLs
    - Time-to-live of messages is currently set to infinity


Deploying Container Instance
============================
1. Authenticate with Azure: `az login`
2. Authenticate with Azure container repository: `az acr login --name FableTestDocker`
3. Build Docker container: `docker build -t fable .`
4. Tag container: `docker tag fable fabletestdocker.azurecr.io/fable:v1`
5. Push container to Azure repository: `docker push fabletestdocker.azurecr.io/fable:v1`

Note: Container repository permissions should be set up to allow for running instances

6. Set environment variables:
```
RESOURCE_GROUP=achitta-broken-detection_group
ACR_NAME=FableTestDocker                    # Azure Container Registry registry name
AKV_NAME=fabletestdockerkeyvault            # Azure Key Vault vault name
ACR_LOGIN_SERVER=fabletestdocker.azurecr.io # Azure Container Registry server name
IDENTITY_NAME=myACIId
resourceID=$(az identity show --resource-group $RESOURCE_GROUP --name $IDENTITY_NAME --query id --output tsv)
```

7. Run the container:
```
az container create \
  --resource-group $RESOURCE_GROUP \
  --name fable \
  --image fabletestdocker.azurecr.io/fable:v1 \
  --registry-login-server $ACR_LOGIN_SERVER \
  --registry-username $(az keyvault secret show --vault-name $AKV_NAME -n $ACR_NAME-pull-usr --query value -o tsv) \
  --registry-password $(az keyvault secret show --vault-name $AKV_NAME -n $ACR_NAME-pull-pwd --query value -o tsv) \
  --assign-identity $resourceID \
  --environment-variables 'FABLE_CONFIG_KEYVAULT'=1 'FABLE_CONFIG_VAULTNAME'='fabletestdockerkeyvault' 'FABLE_CONFIG_SECRETNAME'='fable-config' 'ROOT_USER'=1 \
  --cpu 2 \
  --memory 4 \
  --command-line "tail -f /dev/null"
```

8. Once deployed (takes a few minutes), launch Bash shell: `az container exec --resource-group achitta-broken-detection_group --name fable --exec-command "/bin/bash"`
